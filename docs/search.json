[
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "posit::conf(2023)",
    "section": "",
    "text": "This conference was awesome. Every talk was interesting and engaging. There was a big focus on people - developing data teams and supporting other analysts. There was also a lot of code for people to get excited about.\n\n\n\n\nGreat talk about how the R4DS Online Learning Community helped a new data science develop skills. A selection of book clubs focused on learning different skills in R. Appears that they are start project clubs as well.\n\n\n\n\n\n\nWhat we need to get stuff done:2\n\nAnalysis-ready data\nCross-team support\nSpace for uncertainty - guerrilla gorilla data science tactics\n\nScan for opportunity\nShow, don’t tell - build a skinny version of the thing (maybe with fake data)\nTake data and run\nNail the landing - communication\nUp the ante - higher risk, higher impact\n\n\nSuccessful data science teams need to maximize speed and autonomy. They should build foundations whenever possible. They should try to make one-time asks rather than repeated requests.\n\n\n\nSome thoughts on bringing new staff into a data teams:3\n\nMake the implicit explicit\n\nWorkplace culture\nWhat work days look like…\nWhat tools…\nWhat expectations around communication…\n\nAll knowledge is valid/valuable\n\nAsk for specifics when you get quesitons\n\nDocument - Make life easier for your friends\n\n\\(documenation \\Leftrightarrow communication\\)\n\n\n\n\n\nHow do we overcome this?\n How do we implement this with the team? Conversation:\n\nSystematic, transparent, open-minded\nAssess contextual factors - mission/vision, competitive advantage\nTrack time and impact\n\nWhat’s hard about this?\n\nResistance to dropping projects\nDifferent perspectives about effort and value\nNeed for flexibility\n\nHow does this help?\n\nLinks everything together\nAligns team\nTeaches communication\n\n\n\n\n\nHave a place - write it down as you go in a modular way\nHave an audience in mind\nUse an inclusive tone\nNarrate code in small chunks - see Section 1.4.2\nShare early\nDesign for readability and accessibility\nUse section headers\nUse text formatting\nUse alt-text\n\n\n\n\n\nIf you are afraid to make changes because it might break something, then it’s already broken\n\n\n\n\nPath for developing an idea in data science\n\n\n\n\n\nContinuous integration loop\n\n\n\n\n\n\nImproves data visualization\nCommunity\nPackage development - {artpack} (here)\n\nBeautiful example of what you can do:\n\n\nCode\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\n#&gt; \n#&gt; Attaching package: 'dplyr'\n#&gt; The following objects are masked from 'package:stats':\n#&gt; \n#&gt;     filter, lag\n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     intersect, setdiff, setequal, union\nlibrary(tibble)\nlibrary(artpack)\n\n# Create a base square #\nsquare &lt;- square_data(x = 0, y = 0, size = .1, group_var = TRUE)\n\n# Create square specs to be iterated on #\nn_square &lt;- 500\nscaler &lt;- seq(1, 100, length = n_square)\nfills &lt;- art_pals(\"imagination\", n = n_square)\nangles &lt;- seq(0, 360, length = n_square)\ngroup_n &lt;- group_numbers(1:n_square)\n\n# Add a random transformation for a little razzle dazzle ✨\ntheta &lt;- seq(0, 30, length = 250)\n\nlist_opts &lt;- list(\n  scaler,\n  fills,\n  angles,\n  group_n\n)\n\ndf &lt;- pmap(list_opts, ~ rotator(\n  square |&gt;\n    mutate(\n      x = (x + ..1),\n      y = (y * ..1),\n      fill = ..2,\n      group = paste0(group, ..4)\n    ),\n  x = x, y = y, angle = ..3\n)) |&gt;\n  list_rbind() |&gt;\n  mutate(\n    x = x + cos(theta),\n    y = y + sin(theta)\n  )\n\n\n\ndf |&gt;\n  ggplot(aes(x = x, y = y, group = group)) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#000000\")) +\n  geom_path(\n    color = df$fill,\n    alpha = .2\n  ) \n\n\n\n\n\n\n\n\n\n\n\n{tidymodels}8 includes eight packages to help write models:\n\n{rsample}\n{parsnip}\n{recipes}\n{workflows}\n{tune}\n{yardstick}\n{broom}\n{dials}\n\nI was already familiar with {rsample} and {broom} for resampling data and tidying regression output respectively. The package that will likely be of the most use is {recipes} which helps with the preprocessing of data before modeling. The {tidymodels} website has a great introduction here.\n\n\n\n\n\n\n\nCode\nlibrary(epoxy)\n\n\n\n\nCode\nThe average speed of the cars was **{mean(cars$speed)} mph.**\nBut on average the distance traveled was only _{mean(cars$dist)}_.\n\nThe average speed of the cars was 15.4 mph. But on average the distance traveled was only 42.98.\n\n\n\nCode\nmovie &lt;- list(\n  year = 1989,\n  title = \"Back to the Future Part II\",\n  budget = 4e+07,\n  domgross = 118450002,\n  imdb_rating = 7.8,\n  actors = c(\n    \"Michael J. Fox\",\n    \"Christopher Lloyd\",\n    \"Lea Thompson\",\n    \"Thomas F. Wilson\"\n  ),\n  runtime = 108L\n)\n\n\n\n\nCode\nThe movie {.emph {.titlecase movie$title}}\nwas released in {.strong movie$year}.\nIt earned {.dollar movie$domgross}\nwith a budget of {.dollar movie$budget},\nand it features movie stars\n{.and movie$actors}.\n\nThe movie Back to the Future Part II was released in 1989. It earned $118,450,002 with a budget of $40,000,000, and it features movie stars Michael J. Fox, Christopher Lloyd, Lea Thompson, and Thomas F. Wilson.\n\n\n\nCode\n{1:4}. \"{letters[1:4]}\" is for {c(\"apple\", \"banana\", \"coconut\", \"donut\")}\n\n\n“a” is for apple\n“b” is for banana\n“c” is for coconut\n“d” is for donut\n\n\n\n\nCode\nmpg &lt;- data.frame(\n    manufacturer = c(\"Chevrolet\", \"Dodge\", \"Ford\"),\n    model = c(\"Malibu\", \"Caravan\", \"Expedition\"),\n    cty = c(19, 7, 11),\n    hwy = c(27, 24, 17)\n)\n\n\n\n\nCode\n- A {manufacturer} {model} gets {cty} city and {hwy} highway miles per gallon.\n\n\n\n\nA Chevrolet Malibu gets 19 city and 27 highway miles per gallon.\nA Dodge Caravan gets 7 city and 24 highway miles per gallon.\nA Ford Expedition gets 11 city and 17 highway miles per gallon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(plotly)\nlibrary(gapminder)\n\ndf &lt;- gapminder \n fig &lt;- df %&gt;%\n   plot_ly(\n     x = ~gdpPercap,\n     y = ~lifeExp,\n     size = ~pop,\n     color = ~continent,\n     frame = ~year,\n     text = ~country,\n     hoverinfo = \"text\",\n     type = 'scatter',\n     mode = 'markers'\n   )\n fig &lt;- fig %&gt;% layout(\n     xaxis = list(\n       type = \"log\"\n     )\n )\n fig &lt;- fig %&gt;% animation_opts(\n     1000, easing = \"elastic\", redraw = FALSE\n   )\n fig &lt;- fig %&gt;% animation_button(\n     x = 1, xanchor = \"right\", y = 0, yanchor = \"bottom\"\n   )\n fig &lt;- fig %&gt;% animation_slider(\n     currentvalue = list(prefix = \"YEAR \", font = list(color=\"red\"))\n   )\n fig\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(crosstalk)\nlibrary(d3scatter)\nshared_mtcars &lt;- SharedData$new(mtcars)\nbscols(widths = c(3,NA,NA),\n  list(\n    filter_checkbox(\"cyl\", \"Cylinders\", shared_mtcars, ~cyl, inline = TRUE),\n    filter_slider(\"hp\", \"Horsepower\", shared_mtcars, ~hp, width = \"100%\"),\n    filter_select(\"auto\", \"Automatic\", shared_mtcars, ~ifelse(am == 0, \"Yes\", \"No\"))\n  ),\n  d3scatter(shared_mtcars, ~wt, ~mpg, ~factor(cyl), width=\"100%\", height=250),\n  d3scatter(shared_mtcars, ~hp, ~qsec, ~factor(cyl), width=\"100%\", height=250)\n)\n\n\n\n\n\n\nCylinders\n\n\n\n4\n\n\n\n6\n\n\n\n8\n\n\n\n\n\nHorsepower\n\n\n\n\nAutomatic\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSay you have a picture of an elephant:\n\n\n\nFigure 1: Elephant\n\n\nThis picture was placed here using this inline text ![Elephant](elephant.png){#fig-elephant}. Note that the image was located in the same folder as the script in this case the scripts folder.\nSay that we want to refer to this image in another part of the code. Like this: See Figure 1 for an illustration. This was done by this inline code See @fig-elephant for an illustration.\nWhat’s handy about this is that Quarto keeps track of figure numbering for you. Also this works for tables as well as figures. You’ll need to check the documentation for how to use it.\n\n\n\nSay we have some code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ readr     2.1.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ plotly::filter() masks dplyr::filter(), stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(palmerpenguins)\npenguins |&gt;                                     \n  mutate(                                       \n    bill_ratio = bill_depth_mm / bill_length_mm,\n    bill_area  = bill_depth_mm * bill_length_mm \n  )     \n\n\n# A tibble: 344 × 10\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 4 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_ratio &lt;dbl&gt;, bill_area &lt;dbl&gt;\n\n\nNow we want to explain what we are doing here. We can use code annotation that allows unto explain what is happening in the code. We’ll take the same code as above and add annotation.\n\n\nCode\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n1penguins |&gt;\n2  mutate(\n    bill_ratio = bill_depth_mm / bill_length_mm,\n    bill_area  = bill_depth_mm * bill_length_mm\n  )     \n\n\n\n1\n\nTake penguins, and then,\n\n2\n\nadd new columns for the bill ratio and bill area.\n\n\n\n\n# A tibble: 344 × 10\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 4 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_ratio &lt;dbl&gt;, bill_area &lt;dbl&gt;\n\n\nCheck the script of this for how to do this.\n\n\n\n\n\nCode\npenguins %&gt;% \n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +\n  geom_point()\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nPeguin\n\n\n\n\n\n\n\nThis is a new typesetting system, like LaTex, but easier to code. Generally, rendering pdfs with markdown can be a little bit of a hassle because you need to download some LaTex engine link TinyTex. {typst} is meant to be easier to install.\nhttps://quarto.org/docs/prerelease/1.4/typst.html\n\n\n\n\n\n\n\n\n\nPacman: Always keep your group open to others\n\n\n\n\n\nAll introductions for in rhyming verse composed by ChatGPT.\n\n\n\nThe conference organized coffees and a happy hour for different groups: health care, public service, etc. I attended the Public Service Happy Hour and it was fun. I talked to people from the City of Philadelphia, Kansas Department of Health, and the CDC.\n\n\n\n\nPosit Connect\nPosit Workbench\nDocker\ncommitlint16"
  },
  {
    "objectID": "overview.html#learning",
    "href": "overview.html#learning",
    "title": "posit::conf(2023)",
    "section": "",
    "text": "Great talk about how the R4DS Online Learning Community helped a new data science develop skills. A selection of book clubs focused on learning different skills in R. Appears that they are start project clubs as well."
  },
  {
    "objectID": "overview.html#getting-stuff-done",
    "href": "overview.html#getting-stuff-done",
    "title": "posit::conf(2023)",
    "section": "",
    "text": "What we need to get stuff done:2\n\nAnalysis-ready data\nCross-team support\nSpace for uncertainty - guerrilla gorilla data science tactics\n\nScan for opportunity\nShow, don’t tell - build a skinny version of the thing (maybe with fake data)\nTake data and run\nNail the landing - communication\nUp the ante - higher risk, higher impact\n\n\nSuccessful data science teams need to maximize speed and autonomy. They should build foundations whenever possible. They should try to make one-time asks rather than repeated requests.\n\n\n\nSome thoughts on bringing new staff into a data teams:3\n\nMake the implicit explicit\n\nWorkplace culture\nWhat work days look like…\nWhat tools…\nWhat expectations around communication…\n\nAll knowledge is valid/valuable\n\nAsk for specifics when you get quesitons\n\nDocument - Make life easier for your friends\n\n\\(documenation \\Leftrightarrow communication\\)\n\n\n\n\n\nHow do we overcome this?\n How do we implement this with the team? Conversation:\n\nSystematic, transparent, open-minded\nAssess contextual factors - mission/vision, competitive advantage\nTrack time and impact\n\nWhat’s hard about this?\n\nResistance to dropping projects\nDifferent perspectives about effort and value\nNeed for flexibility\n\nHow does this help?\n\nLinks everything together\nAligns team\nTeaches communication\n\n\n\n\n\nHave a place - write it down as you go in a modular way\nHave an audience in mind\nUse an inclusive tone\nNarrate code in small chunks - see Section 1.4.2\nShare early\nDesign for readability and accessibility\nUse section headers\nUse text formatting\nUse alt-text\n\n\n\n\n\nIf you are afraid to make changes because it might break something, then it’s already broken\n\n\n\n\nPath for developing an idea in data science\n\n\n\n\n\nContinuous integration loop\n\n\n\n\n\n\nImproves data visualization\nCommunity\nPackage development - {artpack} (here)\n\nBeautiful example of what you can do:\n\n\nCode\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\n#&gt; \n#&gt; Attaching package: 'dplyr'\n#&gt; The following objects are masked from 'package:stats':\n#&gt; \n#&gt;     filter, lag\n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     intersect, setdiff, setequal, union\nlibrary(tibble)\nlibrary(artpack)\n\n# Create a base square #\nsquare &lt;- square_data(x = 0, y = 0, size = .1, group_var = TRUE)\n\n# Create square specs to be iterated on #\nn_square &lt;- 500\nscaler &lt;- seq(1, 100, length = n_square)\nfills &lt;- art_pals(\"imagination\", n = n_square)\nangles &lt;- seq(0, 360, length = n_square)\ngroup_n &lt;- group_numbers(1:n_square)\n\n# Add a random transformation for a little razzle dazzle ✨\ntheta &lt;- seq(0, 30, length = 250)\n\nlist_opts &lt;- list(\n  scaler,\n  fills,\n  angles,\n  group_n\n)\n\ndf &lt;- pmap(list_opts, ~ rotator(\n  square |&gt;\n    mutate(\n      x = (x + ..1),\n      y = (y * ..1),\n      fill = ..2,\n      group = paste0(group, ..4)\n    ),\n  x = x, y = y, angle = ..3\n)) |&gt;\n  list_rbind() |&gt;\n  mutate(\n    x = x + cos(theta),\n    y = y + sin(theta)\n  )\n\n\n\ndf |&gt;\n  ggplot(aes(x = x, y = y, group = group)) +\n  theme_void() +\n  theme(plot.background = element_rect(fill = \"#000000\")) +\n  geom_path(\n    color = df$fill,\n    alpha = .2\n  )"
  },
  {
    "objectID": "overview.html#packages",
    "href": "overview.html#packages",
    "title": "posit::conf(2023)",
    "section": "",
    "text": "{tidymodels}8 includes eight packages to help write models:\n\n{rsample}\n{parsnip}\n{recipes}\n{workflows}\n{tune}\n{yardstick}\n{broom}\n{dials}\n\nI was already familiar with {rsample} and {broom} for resampling data and tidying regression output respectively. The package that will likely be of the most use is {recipes} which helps with the preprocessing of data before modeling. The {tidymodels} website has a great introduction here.\n\n\n\n\n\n\n\nCode\nlibrary(epoxy)\n\n\n\n\nCode\nThe average speed of the cars was **{mean(cars$speed)} mph.**\nBut on average the distance traveled was only _{mean(cars$dist)}_.\n\nThe average speed of the cars was 15.4 mph. But on average the distance traveled was only 42.98.\n\n\n\nCode\nmovie &lt;- list(\n  year = 1989,\n  title = \"Back to the Future Part II\",\n  budget = 4e+07,\n  domgross = 118450002,\n  imdb_rating = 7.8,\n  actors = c(\n    \"Michael J. Fox\",\n    \"Christopher Lloyd\",\n    \"Lea Thompson\",\n    \"Thomas F. Wilson\"\n  ),\n  runtime = 108L\n)\n\n\n\n\nCode\nThe movie {.emph {.titlecase movie$title}}\nwas released in {.strong movie$year}.\nIt earned {.dollar movie$domgross}\nwith a budget of {.dollar movie$budget},\nand it features movie stars\n{.and movie$actors}.\n\nThe movie Back to the Future Part II was released in 1989. It earned $118,450,002 with a budget of $40,000,000, and it features movie stars Michael J. Fox, Christopher Lloyd, Lea Thompson, and Thomas F. Wilson.\n\n\n\nCode\n{1:4}. \"{letters[1:4]}\" is for {c(\"apple\", \"banana\", \"coconut\", \"donut\")}\n\n\n“a” is for apple\n“b” is for banana\n“c” is for coconut\n“d” is for donut\n\n\n\n\nCode\nmpg &lt;- data.frame(\n    manufacturer = c(\"Chevrolet\", \"Dodge\", \"Ford\"),\n    model = c(\"Malibu\", \"Caravan\", \"Expedition\"),\n    cty = c(19, 7, 11),\n    hwy = c(27, 24, 17)\n)\n\n\n\n\nCode\n- A {manufacturer} {model} gets {cty} city and {hwy} highway miles per gallon.\n\n\n\n\nA Chevrolet Malibu gets 19 city and 27 highway miles per gallon.\nA Dodge Caravan gets 7 city and 24 highway miles per gallon.\nA Ford Expedition gets 11 city and 17 highway miles per gallon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(plotly)\nlibrary(gapminder)\n\ndf &lt;- gapminder \n fig &lt;- df %&gt;%\n   plot_ly(\n     x = ~gdpPercap,\n     y = ~lifeExp,\n     size = ~pop,\n     color = ~continent,\n     frame = ~year,\n     text = ~country,\n     hoverinfo = \"text\",\n     type = 'scatter',\n     mode = 'markers'\n   )\n fig &lt;- fig %&gt;% layout(\n     xaxis = list(\n       type = \"log\"\n     )\n )\n fig &lt;- fig %&gt;% animation_opts(\n     1000, easing = \"elastic\", redraw = FALSE\n   )\n fig &lt;- fig %&gt;% animation_button(\n     x = 1, xanchor = \"right\", y = 0, yanchor = \"bottom\"\n   )\n fig &lt;- fig %&gt;% animation_slider(\n     currentvalue = list(prefix = \"YEAR \", font = list(color=\"red\"))\n   )\n fig\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(crosstalk)\nlibrary(d3scatter)\nshared_mtcars &lt;- SharedData$new(mtcars)\nbscols(widths = c(3,NA,NA),\n  list(\n    filter_checkbox(\"cyl\", \"Cylinders\", shared_mtcars, ~cyl, inline = TRUE),\n    filter_slider(\"hp\", \"Horsepower\", shared_mtcars, ~hp, width = \"100%\"),\n    filter_select(\"auto\", \"Automatic\", shared_mtcars, ~ifelse(am == 0, \"Yes\", \"No\"))\n  ),\n  d3scatter(shared_mtcars, ~wt, ~mpg, ~factor(cyl), width=\"100%\", height=250),\n  d3scatter(shared_mtcars, ~hp, ~qsec, ~factor(cyl), width=\"100%\", height=250)\n)\n\n\n\n\n\n\nCylinders\n\n\n\n4\n\n\n\n6\n\n\n\n8\n\n\n\n\n\nHorsepower\n\n\n\n\nAutomatic"
  },
  {
    "objectID": "overview.html#quarto",
    "href": "overview.html#quarto",
    "title": "posit::conf(2023)",
    "section": "",
    "text": "Say you have a picture of an elephant:\n\n\n\nFigure 1: Elephant\n\n\nThis picture was placed here using this inline text ![Elephant](elephant.png){#fig-elephant}. Note that the image was located in the same folder as the script in this case the scripts folder.\nSay that we want to refer to this image in another part of the code. Like this: See Figure 1 for an illustration. This was done by this inline code See @fig-elephant for an illustration.\nWhat’s handy about this is that Quarto keeps track of figure numbering for you. Also this works for tables as well as figures. You’ll need to check the documentation for how to use it.\n\n\n\nSay we have some code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ readr     2.1.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ plotly::filter() masks dplyr::filter(), stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(palmerpenguins)\npenguins |&gt;                                     \n  mutate(                                       \n    bill_ratio = bill_depth_mm / bill_length_mm,\n    bill_area  = bill_depth_mm * bill_length_mm \n  )     \n\n\n# A tibble: 344 × 10\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 4 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_ratio &lt;dbl&gt;, bill_area &lt;dbl&gt;\n\n\nNow we want to explain what we are doing here. We can use code annotation that allows unto explain what is happening in the code. We’ll take the same code as above and add annotation.\n\n\nCode\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n1penguins |&gt;\n2  mutate(\n    bill_ratio = bill_depth_mm / bill_length_mm,\n    bill_area  = bill_depth_mm * bill_length_mm\n  )     \n\n\n\n1\n\nTake penguins, and then,\n\n2\n\nadd new columns for the bill ratio and bill area.\n\n\n\n\n# A tibble: 344 × 10\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 4 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_ratio &lt;dbl&gt;, bill_area &lt;dbl&gt;\n\n\nCheck the script of this for how to do this.\n\n\n\n\n\nCode\npenguins %&gt;% \n  ggplot(aes(x = bill_depth_mm, y = bill_length_mm, color = species)) +\n  geom_point()\n\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nPeguin\n\n\n\n\n\n\n\nThis is a new typesetting system, like LaTex, but easier to code. Generally, rendering pdfs with markdown can be a little bit of a hassle because you need to download some LaTex engine link TinyTex. {typst} is meant to be easier to install.\nhttps://quarto.org/docs/prerelease/1.4/typst.html"
  },
  {
    "objectID": "overview.html#conference-set-up",
    "href": "overview.html#conference-set-up",
    "title": "posit::conf(2023)",
    "section": "",
    "text": "Pacman: Always keep your group open to others\n\n\n\n\n\nAll introductions for in rhyming verse composed by ChatGPT.\n\n\n\nThe conference organized coffees and a happy hour for different groups: health care, public service, etc. I attended the Public Service Happy Hour and it was fun. I talked to people from the City of Philadelphia, Kansas Department of Health, and the CDC."
  },
  {
    "objectID": "overview.html#other-stuff",
    "href": "overview.html#other-stuff",
    "title": "posit::conf(2023)",
    "section": "",
    "text": "Posit Connect\nPosit Workbench\nDocker\ncommitlint16"
  },
  {
    "objectID": "overview.html#footnotes",
    "href": "overview.html#footnotes",
    "title": "posit::conf(2023)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHow the R for Data Science (R4DS) Online Learning Community Made Me a Better Student (Lydia Gibson,Data Scientist, Intel)↩︎\nData Confusion to Data Intelligence (Elaine McVey, Senior Director of Analytics, Chief; David Meza, Head of Analytics - Human Capital, NASA)↩︎\nThe “I” in Team: Liz Roten, Data Scientist, Metropolitan Council↩︎\nSerenity Now, Productivity Later: Focus Your Project Stack with The Gonzalez Matrix (Patrick Tennant, Senior Director of Data Science and Analytics, Meadows Mental Health Policy Institute)↩︎\nDocumenting Things: Openly for Future Us (Julia Stewart Lowndes, Openscapes)↩︎\nR Not Only In Production (Kara Woo, Senior Data Science Engineer, InsightRX)↩︎\nIt’s All About Perspective: Making a Case for Generative Art (Meghan Santiago Harrism Data Scientist, Prostate Cancer Clinical Trials Consortium - Memorial Sloan Kettering)↩︎\nhttps://www.tidymodels.org/↩︎\nhttps://pkg.garrickadenbuie.com/epoxy//index.html↩︎\nhttps://testthat.r-lib.org/↩︎\nhttps://jessecambon.github.io/tidygeocoder/↩︎\nhttps://plotly.com/r/animations/↩︎\nhttps://rstudio.github.io/crosstalk/↩︎\nhttps://quarto.org/docs/authoring/cross-references.html↩︎\nhttps://quarto.org/docs/authoring/code-annotation.html↩︎\nhttps://github.com/conventional-changelog/commitlint↩︎"
  }
]